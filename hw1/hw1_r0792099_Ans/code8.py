# -*- coding: UTF-8 -*-
# https://www.jianshu.com/p/136ed4b6e756
# https://www.bbsmax.com/A/xl56XDvrzr/
# https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/rsa/rsa_module_attack/#_4
# https://www.tr0y.wang/2017/11/06/CTFRSA/index.html

# excuted in python3 and Conda environment "py34" which has gmpy2
import gmpy2
from functools import reduce

# from nc
e = 3
N1 = 103230465322287796914394334106266910136943955312432683388846108264186728321190778789465558360851089268200518464083423785818064144747037553264765921821212164568972753983551964859557408920248462766369512135274260517520626533518882424481855620524687404153811084511850032877300623638934866574168370452926353087377
c1 = 57050507303287150034952542401374802430742270762735848745073860991680824353971065214663080573388557877565311158912894977232967487257923448621281189053118067070954085876261637806686054877749932152166020294524333822830899902181493988017918319191856649276785118279723202822307614952817216727872817420827350475609

e = 3
N2 = 84704152510693348910840638538815364290523831129639443008293639967972342445179431457167351516378012647815470829021443289780220631313774419561359147988210373344154797510395315439639494988126307449924811581193590803796010178070437253268088853133559028905342823166985381556446531832739141945539275545671175153529
c2 = 78674340090058142682922328191744540493923152111843462253308600624153858572356699188863756133861809146318056226881681119036248504360765619335841690762645941874950436233445235056507534327167704732016994731652238246397079019067530095629786407988914879643858534787942905699155651215968116502330064056346081760792

e = 3
N3 = 64570445511726669626542489173327950165122702289449174274256051622396459728155481562645523941907104181260300127333013140261772301623321962262734507456377415441514598114404743783804891860730718903313727242267973430692897167406331083818095659784978079574494829894603460971518689540150655599409361862317094980341
c3 = 46804443887994625232360135371395266026981589987807459949539988762474159835610855166178926176300167695509814873651861631623132397638391549805322787655249518755284319299198040750076497402407283733751187051314217707215357692658807114903760904290777227492274477601859694461702899791831192203053862959461714422776


def egcd(a, b):
    """Eculidian extended"""
    if 0 == b:
        return 1, 0, a
    x, y, q = egcd(b, a % b)
    x, y = y, (x - a // b * y)
    return x, y, q

# Chinese Remainder theorem
def chinese_remainder(pairs):
    """CRT"""
    mod_list, remainder_list = [p[0] for p in pairs], [p[1] for p in pairs]
    mod_product = reduce(lambda x, y: x * y, mod_list)
    mi_list = [mod_product//x for x in mod_list]
    mi_inverse = [egcd(mi_list[i], mod_list[i])[0] for i in range(len(mi_list))]
    x = 0
    for i in range(len(remainder_list)):
        x += mi_list[i] * mi_inverse[i] * remainder_list[i]
        x %= mod_product
    return x

CMTresult = chinese_remainder([(N1, c1), (N2, c2), (N3, c3)])
# print(CMTresult)
Plaintext = gmpy2.iroot(CMTresult,e)[0]

print("plaintext = " , Plaintext)
print("Text = ")

# 
def n2s(n):
    import binascii
    """
    Number to string.
    """
    s = hex(n)[2:].rstrip("L")
    if len(s) % 2 != 0:
        s = "0" + s
    return binascii.a2b_hex(s).decode("utf8")
    # return s.decode("hex")  # python2 才有 str.decode
print(n2s(Plaintext))



